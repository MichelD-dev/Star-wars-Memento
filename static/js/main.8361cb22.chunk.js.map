{"version":3,"sources":["Components/HOC/withFetch.js","Components/List.js","Components/Content.js","Components/Header/Header.js","App.js","index.js"],"names":["withFetch","WrappedComponent","props","useState","data","setData","isLoading","setIsLoading","isError","setIsError","useEffect","category","fetchData","saveData","json","a","fetch","response","ok","Error","Dimmer","active","Loader","inverted","size","style","opacity","cat","DataList","Segment","List","selection","divided","map","item","i","Item","name","title","FetchedContent","clicked","Container","fluid","width","Grid","stackable","centered","columns","height","paddingTop","justifyContent","some","Column","results","Header","handleClick","Menu","secondary","fixed","padding","Image","wrapped","src","verticalAlign","position","onClick","App","setClicked","setCategory","minHeight","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8361cb22.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\nfunction withFetch(WrappedComponent) {\r\n  const WithFetch = props => {\r\n    const [data, setData] = useState([])\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [isError, setIsError] = useState(false)\r\n\r\n    useEffect(() => {\r\n      if (props.category) fetchData(props.category)\r\n    }, [props.category])\r\n\r\n    const saveData = json => {\r\n      setData([...data, json])\r\n      setIsLoading(false)\r\n    }\r\n\r\n    const fetchData = async category => {\r\n      try {\r\n        setIsLoading(true)\r\n        const response = await fetch(`http://swapi.dev/api/${category}`)\r\n        if (response.ok) {\r\n          const json = await response.json()\r\n          saveData(json)\r\n        } else {\r\n          throw new Error('Fetch request error')\r\n        }\r\n      } catch (err) {\r\n        setIsLoading(false)\r\n        setIsError(err)\r\n      }\r\n    }\r\n\r\n    return isLoading ? (\r\n      <Dimmer active>\r\n        <Loader inverted size='big' style={{ opacity: '.8' }}>\r\n          Veuillez patienter...\r\n        </Loader>\r\n      </Dimmer>\r\n    ) : (\r\n      <WrappedComponent\r\n        data={data}\r\n        isLoading={isLoading}\r\n        isError={isError}\r\n        {...props}\r\n        cat={props.category}\r\n      />\r\n    )\r\n  }\r\n\r\n  return WithFetch\r\n}\r\n\r\nexport default withFetch\r\n","import { Segment, List } from 'semantic-ui-react'\r\n\r\nconst DataList = ({ data }) => {\r\n  return (\r\n    <Segment inverted style={{ opacity: '.8' }}>\r\n      <List selection inverted divided size='big'>\r\n        {data.map((item, i) => (\r\n          <List.Item key={`name_${i}`}>{item.name || item.title}</List.Item>\r\n        ))}\r\n      </List>\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default DataList\r\n","import { Grid, Container } from 'semantic-ui-react'\r\nimport withFetch from './HOC/withFetch'\r\nimport DataList from './List'\r\n\r\nconst Content = ({ data, cat, clicked }) => {\r\n  return (\r\n    <>\r\n      <Container fluid style={{ width: '90vw' }}>\r\n        <Grid\r\n          stackable\r\n          centered\r\n          columns={4}\r\n          style={{\r\n            height: '100vh',\r\n            paddingTop: '20rem',\r\n            justifyContent: 'flex-start',\r\n          }}\r\n        >\r\n          {clicked.some(item => item === cat) &&\r\n            data.map((category, i) => (\r\n              <Grid.Column key={`${category}_${i}`}>\r\n                <DataList data={category.results} cat={category} />\r\n              </Grid.Column>\r\n            ))}\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\nconst FetchedContent = withFetch(Content)\r\n\r\nexport default FetchedContent\r\n","import { Image, Menu } from 'semantic-ui-react'\r\n\r\nconst Header = ({ fetch }) => {\r\n  const handleClick = category => {\r\n    fetch(category)\r\n  }\r\n\r\n  return (\r\n    <Menu\r\n      secondary\r\n      size='massive'\r\n      fixed='top'\r\n      stackable\r\n      inverted\r\n      style={{ padding: '2rem 4rem 0' }}\r\n    >\r\n      <Menu.Item>\r\n        <Image\r\n          wrapped\r\n          size='small'\r\n          src='https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/Star_Wars_Yellow_Logo.svg/1280px-Star_Wars_Yellow_Logo.svg.png'\r\n          verticalAlign='middle'\r\n        />\r\n      </Menu.Item>\r\n      <Menu.Menu position='right'>\r\n        <Menu.Item onClick={() => handleClick('films')}>Films</Menu.Item>\r\n        <Menu.Item onClick={() => handleClick('planets')}>Planètes</Menu.Item>\r\n        <Menu.Item onClick={() => handleClick('people')}>Personnes</Menu.Item>\r\n        <Menu.Item onClick={() => handleClick('starships')}>\r\n          Vaisseaux\r\n        </Menu.Item>\r\n        <Menu.Item onClick={() => handleClick('vehicles')}>Vehicules</Menu.Item>\r\n        <Menu.Item onClick={() => handleClick('species')}>Espèces</Menu.Item>\r\n      </Menu.Menu>\r\n    </Menu>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { useState } from 'react'\nimport { Container } from 'semantic-ui-react'\nimport FetchedContent from './Components/Content.js'\nimport Header from './Components/Header/Header.js'\n\nfunction App() {\n  const [clicked, setClicked] = useState([])\n  const [category, setCategory] = useState('')\n\n  const fetch = category => {\n    setClicked([...clicked, category])\n    setCategory(category)\n  }\n\n  return (\n    <Container\n      fluid\n      style={{\n        minHeight: '100vw',\n      }}\n    >\n      <Header fetch={fetch} />\n      <FetchedContent clicked={clicked} category={category} />\n    </Container>\n  )\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}